import random
import re
from api import api_request_img_day, api_request_mars, ParamMars
from datetime import datetime
from config import BOT_TOKEN
from database import User
from states import States

import telebot
from telebot.storage import StateMemoryStorage
from telebot.types import Message
from telebot import custom_filters

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)


@bot.message_handler(commands=["start", "help"])
def start_bot(message: Message) -> None:
    r"""
    Message handler: '\help', '\start' from the user.
    We add the user to the database if we have not done this before
    """
    user_id: int = message.from_user.id
    username: str = message.from_user.username
    first_name: str = message.from_user.first_name
    last_name: str = message.from_user.last_name

    try:
        User.create(
            user_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
        )
        bot.send_message(message.chat.id, """
–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–æ–≤—ã–π –±–æ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ üôÇ
–Ø –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å NASA.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /image_day –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–Ω—è –æ—Ç NASA –ø–æ –¥–∞—Ç–µ
- /mars –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–∫–∏ —Å –ú–∞—Ä—Å–∞, –∞ –∏–º–µ–Ω–Ω–æ —Å –º–∞—Ä—Å–æ—Ö–æ–¥–æ–≤ —Å —Ä–∞–∑–Ω—ã—Ö –∫–∞–º–µ—Ä
""")
    except:
        bot.send_message(message.chat.id, f"–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, {username} üôÇ")
        bot.send_message(message.chat.id, """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /image_day –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–Ω—è –æ—Ç NASA –ø–æ –¥–∞—Ç–µ
- /mars –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–∫–∏ —Å –ú–∞—Ä—Å–∞, –∞ –∏–º–µ–Ω–Ω–æ —Å –º–∞—Ä—Å–æ—Ö–æ–¥–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞–º–µ—Ä
""")
    bot.set_state(message.from_user.id, States.base, message.chat.id)


@bot.message_handler(commands=["mars"])
def set_camera_for_mars(message: Message) -> None:
    r"""
    Message handler: '\mars' from user.
    We request the type of camera from which photographs are needed.
    Change the bot state to set_camera
    """
    bot.send_message(
        message.chat.id, """
–ú–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ 5 —Ñ–æ—Ç–æ–∫ (–º–æ–∂–µ—Ç –º–µ–Ω—å—à–µ) —Å –ú–∞—Ä—Å–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞ NASA.
–£–∫–∞–∂–∏ –∫–∞–º–µ—Ä—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±–µ –Ω—É–∂–Ω—ã —Ñ–æ—Ç–∫–∏:
""")

    bot.send_message(
        message.chat.id, """
–î–ª—è —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã, –Ω–∞–ø–∏—à–∏ - –§—Ä–æ–Ω—Ç
–î–ª—è –∑–∞–¥–Ω–µ–π –∫–∞–º–µ—Ä—ã, –Ω–∞–ø–∏—à–∏ - –ó–∞–¥–Ω—è—è
–î–ª—è –º–∞—á—Ç–æ–≤–æ–π –∫–∞–º–µ—Ä—ã, –Ω–∞–ø–∏—à–∏ - –ú–∞—á—Ç–∞
""")

    bot.set_state(message.from_user.id, States.set_camera, message.chat.id)


@bot.message_handler(state=States.set_camera)
def set_sol_for_mars(message: Message) -> None:
    """
    Bot state handler set_camera.
    At the input to the function, we check that the camera type is correct and request the date.
    Change the bot state to send_pictures
    """
    if re.search(r"\b([–§—Ñ]—Ä–æ–Ω—Ç|[–ó–∑]–∞–¥–Ω—è—è|[–ú–º]–∞—á—Ç–∞)\b", message.text):
        ParamMars.camera = message.text
        bot.send_message(message.chat.id, """
–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É –∑–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫–∏
–í —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2023
""")
        bot.set_state(message.from_user.id, States.send_pictures, message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ö–∞–º–µ—Ä–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.send_message(message.chat.id, """
–î–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã –Ω–∞–ø–∏—à–∏: —Ñ—Ä–æ–Ω—Ç
–î–ª—è –∑–∞–¥–Ω–µ–π –∫–∞–º–µ—Ä—ã –Ω–∞–ø–∏—à–∏: –∑–∞–¥–Ω—è—è
–î–ª—è –º–∞—á—Ç–æ–≤–æ–π –∫–∞–º–µ—Ä—ã –Ω–∞–ø–∏—à–∏: –º–∞—á—Ç–∞
""")
        bot.send_message(message.chat.id, "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")


@bot.message_handler(state=States.send_pictures)
def send_pict_from_mars(message: Message) -> None:
    """
    Bot state handler send_pictures.
    At the input to the function, we check the correctness of the date and send photos from Mars
    """
    if re.search(r"\b\d{2}.\d{2}.\d{4}\b", message.text):
        ParamMars.earth_date = datetime.strptime(message.text, "%d.%m.%Y")
        pictures_from_mars: list = api_request_mars(ParamMars.earth_date, ParamMars.camera)

        for i_picture in pictures_from_mars:
            bot.send_message(message.chat.id, i_picture)
        bot.send_message(message.chat.id, """
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å –∫–∞–º–µ—Ä—É, –≤–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ /mars
–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start
""")
    else:
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –∑–∞–¥–∞–Ω–∞ –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: 01.01.2023. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


@bot.message_handler(commands=["image_day"])
def set_date_for_img_day(message: Message) -> None:
    r"""
    Message handler: '\image_day' from the user.
    We ask the user for a date
    Change the bot state to send_img_day
    """
    bot.send_message(message.chat.id,
                     "–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ —Ñ–æ—Ç–æ –¥–Ω—è –∏–∑ –∞—Ä—Ö–∏–≤–∞ NASA, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω–∞ –æ—Ç —Ç–µ–±—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏ –¥–∞—Ç—É, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2023")
    bot.set_state(message.from_user.id, States.send_img_day, message.chat.id)


@bot.message_handler(state=States.send_img_day)
def send_img_day(message: Message) -> None:
    """
    Bot state handler send_img_day.
    At the input to the function, we check that the date is correct and send a picture of the day
    """
    if re.search(r"\b\d{2}.\d{2}.\d{4}\b", message.text):
        date_time: datetime = datetime.strptime(message.text, "%d.%m.%Y")
        picture_and_description: str = api_request_img_day(date_time.date())
        bot.send_message(message.chat.id, picture_and_description)
        bot.send_message(message.chat.id, """
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∑–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É, –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ –µ—ë.
–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start
""")
    else:
        bot.send_message(message.chat.id, """
–î–∞—Ç–∞ –∑–∞–¥–∞–Ω–∞ –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: 01.01.2023. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.
–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start
""")


@bot.message_handler(content_types=["text"])
def hello_send(message: Message) -> None:
    """
    The handler for all user messages.
    If we catch a greeting from a user, we will greet you back
    """
    if re.search(r"[–ü–ø]—Ä–∏–≤|[–ó–∑]–¥—Ä–∞–≤—Å—Ç–≤—É[–∏–π]|[–•—Ö]–∞[–∏–π—é]|[Hh]i|[Hh]ello|[–ó–∑]–¥–∞—Ä–æ–≤", message.text):
        user = User.select().where(User.username == message.from_user.username).first()
        hello_commands: tuple = ("–ü—Ä–∏–≤–µ—Ç", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–•–∞–π", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–•–∞—é-—Ö–∞–π", "Hello", "Hi", "–ù—É –ø—Ä–∏–≤–µ—Ç")
        if user:
            if message.from_user.first_name:
                user_name: str = message.from_user.first_name
            else:
                user_name: str = message.from_user.username
            bot.send_message(message.chat.id, random.choice(hello_commands) + ", " + user_name)
        else:
            bot.send_message(message.chat.id,
                             random.choice(hello_commands) + "\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start")
    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –î–ª—è –ø–æ–º–æ—â–∏ –∏ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /start")
    bot.set_state(message.from_user.id, States.base, message.chat.id)


if __name__ == '__main__':
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.infinity_polling()
